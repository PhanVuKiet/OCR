import streamlit as st
from PIL import Image
import pytesseract
from pdf2image import convert_from_bytes
import io

# ========================================================================================
# C·∫§U H√åNH TRANG
# ========================================================================================
st.set_page_config(
    page_title="Tr·ª£ l√Ω OCR Th√¥ng minh",
    page_icon="üìÑ",
    layout="wide"
)

# ========================================================================================
# H√ÄM H·ªñ TR·ª¢ (LOGIC X·ª¨ L√ù)
# ========================================================================================

def resize_image(image, max_width=1500):
    """Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh n·∫øu chi·ªÅu r·ªông c·ªßa n√≥ l·ªõn h∆°n max_width ƒë·ªÉ t·ªëi ∆∞u b·ªô nh·ªõ."""
    try:
        if image.width > max_width:
            ratio = max_width / image.width
            new_height = int(image.height * ratio)
            resized_image = image.resize((max_width, new_height), Image.LANCZOS)
            return resized_image
        return image
    except Exception as e:
        # B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ resize
        return image

def process_file(file_bytes, file_extension):
    """
    H√†m trung t√¢m x·ª≠ l√Ω file ƒë·∫ßu v√†o (·∫£nh ho·∫∑c PDF) v√† tr·∫£ v·ªÅ vƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t.
    """
    extracted_text = ""
    try:
        if file_extension == 'pdf':
            images = convert_from_bytes(file_bytes)
            all_text = []
            for img in images:
                optimized_img = resize_image(img)
                all_text.append(pytesseract.image_to_string(optimized_img, lang='vie'))
            extracted_text = "\n\n--- H·∫øt trang ---\n\n".join(all_text)
        elif file_extension in ['png', 'jpg', 'jpeg']:
            image = Image.open(io.BytesIO(file_bytes))
            optimized_img = resize_image(image)
            extracted_text = pytesseract.image_to_string(optimized_img, lang='vie')
        return extracted_text, None  # Tr·∫£ v·ªÅ text v√† kh√¥ng c√≥ l·ªói
    except Exception as e:
        return None, f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}" # Tr·∫£ v·ªÅ kh√¥ng c√≥ text v√† th√¥ng b√°o l·ªói

# ========================================================================================
# GIAO DI·ªÜN CH√çNH C·ª¶A ·ª®NG D·ª§NG
# ========================================================================================

st.title("üìÑ Tr·ª£ l√Ω OCR Th√¥ng minh")
st.write("Tr√≠ch xu·∫•t vƒÉn b·∫£n Ti·∫øng Vi·ªát t·ª´ file ·∫£nh ho·∫∑c PDF m·ªôt c√°ch nhanh ch√≥ng v√† hi·ªáu qu·∫£.")

# Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
if 'extracted_text' not in st.session_state:
    st.session_state.extracted_text = None
if 'error_message' not in st.session_state:
    st.session_state.error_message = None
if 'last_uploaded_filename' not in st.session_state:
    st.session_state.last_uploaded_filename = None

# C·ªôt cho ph·∫ßn t·∫£i l√™n v√† h∆∞·ªõng d·∫´n
col1, col2 = st.columns([2, 1])

with col1:
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n file ·∫£nh (JPG, PNG) ho·∫∑c PDF c·ªßa b·∫°n...",
        type=['pdf', 'png', 'jpg', 'jpeg']
    )

with col2:
    with st.expander("üí° M·∫πo s·ª≠ d·ª•ng", expanded=False):
        st.info("""
        - ƒê·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t, h√£y s·ª≠ d·ª•ng ·∫£nh r√µ n√©t, ch·ªØ kh√¥ng b·ªã m·ªù, nghi√™ng.
        - Gi·ªõi h·∫°n t·∫£i l√™n l√† 200MB, nh∆∞ng file nh·ªè h∆°n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω nhanh h∆°n.
        - ƒê·ªëi v·ªõi PDF nhi·ªÅu trang, ·ª©ng d·ª•ng s·∫Ω n·ªëi k·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c trang l·∫°i.
        """)

# X·ª≠ l√Ω file n·∫øu c√≥ file m·ªõi ƒë∆∞·ª£c t·∫£i l√™n
if uploaded_file is not None:
    # Ch·ªâ x·ª≠ l√Ω n·∫øu file n√†y ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
    if uploaded_file.name != st.session_state.last_uploaded_filename:
        with st.spinner(f"ƒêang x·ª≠ l√Ω file '{uploaded_file.name}', vui l√≤ng ch·ªù..."):
            file_bytes = uploaded_file.getvalue()
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            # G·ªçi h√†m x·ª≠ l√Ω trung t√¢m
            text, error = process_file(file_bytes, file_extension)
            
            # L∆∞u k·∫øt qu·∫£ v√†o session_state
            st.session_state.extracted_text = text
            st.session_state.error_message = error
            st.session_state.last_uploaded_filename = uploaded_file.name
        
        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i
        if st.session_state.error_message:
            st.error(st.session_state.error_message)
        else:
            st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file '{uploaded_file.name}'!")


# Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
if st.session_state.extracted_text:
    st.markdown("---")
    st.header("K·∫øt qu·∫£ tr√≠ch xu·∫•t")
    st.text_area("VƒÉn b·∫£n:", st.session_state.extracted_text, height=400, key="result_text")

    # Chia c·ªôt cho c√°c n√∫t h√†nh ƒë·ªông
    btn_col1, btn_col2, _ = st.columns([1, 1, 3])

    with btn_col1:
        st.download_button(
            label="üì• T·∫£i k·∫øt qu·∫£ xu·ªëng",
            data=st.session_state.extracted_text.encode('utf-8'),
            file_name=f"ket_qua_{st.session_state.last_uploaded_filename}.txt",
            mime="text/plain"
        )
    
    with btn_col2:
        # N√∫t x√≥a k·∫øt qu·∫£
        if st.button("üîÑ X√≥a & l√†m l·∫°i"):
            st.session_state.extracted_text = None
            st.session_state.error_message = None
            st.session_state.last_uploaded_filename = None
            # D√πng st.experimental_rerun() ƒë·ªÉ t·∫£i l·∫°i trang ngay l·∫≠p t·ª©c
            st.experimental_rerun()
